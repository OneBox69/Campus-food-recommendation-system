1) Spring Boot (the engine)
What: Lets Java show web pages without you setting up a separate web server.
Why: Press run, it works. Tons of examples online.
Not using: Raw Servlets (too low-level), newer frameworks (harder, fewer tutorials).

2) Thymeleaf (the page filler)
What: Takes your HTML and fills in blanks with data (names, prices, ratings).
Why: Works smoothly with Spring; easy to learn (just a few extra attributes).
Not using: JSP/JSF (older/heavier), other templaters (less Spring-friendly).

3) H2 (the practice database for your laptop)
What: Tiny database that lives inside your app while you develop.
Why: No install. Clean slate every time. Fast to test.
Not using: MySQL/Postgres locally (heavier), SQLite (can be finicky with Java/file locking).

4) PostgreSQL (the real database for the live website)
What: Serious database your deployed app uses on the internet.
Why: Reliable, free on most hosts, plays nicely with Spring.
Not using: MySQL (fine, but has beginner “quirks”), Mongo (NoSQL—worse for restaurant↔review relations).

5) Spring Data JPA (the data helper)
What: Saves/loads rows without you writing lots of SQL by hand.
Why: CRUD in minutes; fewer bugs.
Not using: Plain JDBC (lots of boilerplate and manual mapping).

6) Render or Railway (the host)
What: Service that runs your app and gives you a public link.
Why: Click deploy, done. No server setup.
Not using: Self-hosting (too much work), school lab servers (often locked down).
